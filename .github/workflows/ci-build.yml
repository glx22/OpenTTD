name: CI

on:
  pull_request:
  push:
    branches:
    - master

jobs:
  linux:
    name: Linux

    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, gcc]
        include:
          - compiler: clang
            cxxcompiler: clang++
          - compiler: gcc
            cxxcompiler: g++
    env:
      CTEST_OUTPUT_ON_FAILURE: 1
      CC: ${{ matrix.compiler }}
      CXX: ${{ matrix.cxxcompiler }}

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          libfontconfig-dev \
          libicu-dev \
          liblzma-dev \
          liblzo2-dev \
          libsdl1.2-dev \
          libsdl2-dev \
          libxdg-basedir-dev \
          zlib1g-dev \
          # EOF

    - name: Checkout
      uses: actions/checkout@v2

    - name: Get OpenGFX
      run: |
        mkdir -p ~/.local/share/openttd/baseset
        cd ~/.local/share/openttd/baseset
        curl -L https://cdn.openttd.org/opengfx-releases/0.6.0/opengfx-0.6.0-all.zip -o opengfx-all.zip
        unzip opengfx-all.zip
        rm -f opengfx-all.zip

    - name: CMake
      run: mkdir build && cd build && cmake ..

    - name: Build
      run: cd build && make -j2

    - name: Test
      run: cd build && make -j2 test

  windows:
    name: Windows

    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x64]
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.arch }}-windows-static

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Prepare cache key
      id: cache-key
      run: |
        cd c:\vcpkg
        git fetch
        $head = git rev-parse FETCH_HEAD
        echo "::set-output name=head::$head"
        Get-Date -UFormat "::set-output name=date::%Y%m%d"

    - name: Cache vcpkg
      uses: actions/cache@v2
      id: cache
      with:
        path: |
            c:/vcpkg
            !c:/vcpkg/packages
            !c:/vcpkg/buildtrees
            !c:/vcpkg/downloads
        key: ${{ runner.os }}-vcpkg-${{ matrix.arch }}-${{ steps.cache-key.outputs.date }}-${{ steps.cache-key.outputs.head }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-${{ matrix.arch }}-${{ steps.cache-key.outputs.date }}-
          ${{ runner.os }}-vcpkg-${{ matrix.arch }}-

    - name: Install dependencies
      run: |
        cd c:\vcpkg
        git pull
        if (.\vcpkg.exe update | Select-String -pattern bootstrap) { .\bootstrap-vcpkg.bat }
        .\vcpkg install liblzma libpng lzo zlib

    - name: Install OpenGFX
      run: |
        mkdir -p "C:/Users/Public/Documents/OpenTTD/baseset"
        cd "C:/Users/Public/Documents/OpenTTD/baseset"
        curl -L https://cdn.openttd.org/opengfx-releases/0.6.0/opengfx-0.6.0-all.zip -o opengfx-all.zip
        unzip opengfx-all.zip
        rm -f opengfx-all.zip
      shell: bash

    - name: Set ${{ matrix.arch }} build environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}

    - name: CMake
      run: mkdir build && cd build && cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE="c:\vcpkg\scripts\buildsystems\vcpkg.cmake" -DVCPKG_TARGET_TRIPLET="$env:VCPKG_DEFAULT_TRIPLET"

    - name: Build
      run: cd build && cmake --build .

    - name: Test
      run: cd build && ctest -C Debug

  macos:
    name: Mac OS

    runs-on: macos-latest
    strategy:
      fail-fast: false
    env:
      CTEST_OUTPUT_ON_FAILURE: 1
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install dependencies
      run: brew install pkg-config lzo xz libpng freetype
      env:
        HOMEBREW_NO_AUTO_UPDATE: 1

    - name: Install OpenGFX
      run: |
        mkdir -p ~/Documents/OpenTTD/baseset
        cd ~/Documents//OpenTTD/baseset
        curl -L https://cdn.openttd.org/opengfx-releases/0.6.0/opengfx-0.6.0-all.zip -o opengfx-all.zip
        unzip opengfx-all.zip
        rm -f opengfx-all.zip

    - name: CMake
      run: mkdir build && cd build && cmake ..

    - name: Build
      run: cd build && make -j2

    - name: Test
      run: cd build && make -j2 test
